import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { useQuery } from "@tanstack/react-query";
import Select from "react-select";
import axios from "axios";
import "../styles/Register.css";
import { SERVER_LINK } from "../utils/api";
import { studentsSchema } from "../utils/validationSchemas";
import { fetchSports, fetchTeams } from "../utils/fetch";
import { genders } from "../utils/interfaces";


const RegisterStudent: React.FC = () => {
  const navigate = useNavigate();

  const [newSportName, setNewSportName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
  const [newTeamName, setNewTeamName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

  const handleAddNewSport = async () => {
    if (!newSportName.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!");
      return;
    }
  
    try {
      const response = await axios.post(`${SERVER_LINK}/sport/create`, {
        sport_name: newSportName.trim(),
      });
  
      const result = response.data;
      const newSport = { value: result.sport_id, label: result.sport_name };
  
      setValue("sport", newSport); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
      setNewSportName(""); // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      refetchSports(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
  
      alert("–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞:", error);
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞");
    }
  };

  const handleAddNewTeam = async () => {
    if (!newTeamName.trim() || !selectedSport) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞!");
      return;
    }
  
    try {
      const response = await axios.post(`${SERVER_LINK}/team/create`, {
        sport_id: selectedSport,
        team_name: newTeamName.trim(),
      });
  
      const result = response.data;
      const newTeam = { value: result.team_id, label: result.team_name };
  
      setValue("team", newTeam); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
      setNewTeamName(""); // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      refetchTeams(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
  
      alert("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", error);
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã");
    }
  };
  
  // üéØ React Hook Form
  const {
    register,
    handleSubmit,
    control,
    watch,
    setValue,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(studentsSchema),
    defaultValues: {
      email: "",
      password: "",
      first_name: "",
      middle_name: "",
      last_name: "",
      birth_date: "",
      gender: undefined,
      sport: null,
      isTeamSport: false,
      team: null,
    },
  });

  const sport = watch("sport"); // –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞
  const isTeamSport = watch("isTeamSport"); // –°–ª–µ–¥–∏–º –∑–∞ —á–µ–∫–±–æ–∫—Å–æ–º "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç"

  // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
  const { data: sports = [], isLoading: loadingSports, refetch: refetchSports } = useQuery({
    queryKey: ["sports"],
    queryFn: fetchSports,
  });

  const selectedSport =
    sport && "value" in sport ? (sport.value as string) : null;

  const { data: teams = [], isFetching: loadingTeams, refetch: refetchTeams } = useQuery({
    queryKey: selectedSport ? ["teams", selectedSport] : ["teams"],
    queryFn: async () => {
      if (!selectedSport) return [];
      return await fetchTeams(selectedSport);
    },
    enabled: !!selectedSport,
  });

  // üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const onSubmit = async (data: any) => {
    try {
      const response = await axios.post(`${SERVER_LINK}/register-students`, {
        ...data,
        gender: data.gender.value,
        sport_id: data.sport?.value || null,
        team_id: data.isTeamSport && data.team ? data.team.value : null,
      });

      localStorage.setItem("token", response.data.token);
      alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
      navigate("/my-analysis");
    } catch (error: any) {
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
  };

  return (
    <div className="register-form">
      <form onSubmit={handleSubmit(onSubmit)} className="reg-form">
        {/* Email –∏ –ø–∞—Ä–æ–ª—å */}
        <div className="column">
          <label>Email:</label>
          <input {...register("email")} className="input-react" />
          <p className="error-form">{errors.email?.message}</p>
        </div>
        <div className="column">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type="password"
            {...register("password")}
            className="input-react"
          />
          <p className="error-form">{errors.password?.message}</p>
        </div>

        {/* –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="column">
          <label>–ò–º—è:</label>
          <input {...register("first_name")} className="input-react" />
          <p className="error-form">{errors.first_name?.message}</p>
        </div>
        <div className="column">
          <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
          <input {...register("middle_name")} className="input-react" />
        </div>
        <div className="column">
          <label>–§–∞–º–∏–ª–∏—è:</label>
          <input {...register("last_name")} className="input-react" />
          <p className="error-form">{errors.last_name?.message}</p>
        </div>
        <div className="column">
          <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
          <input
            type="date"
            {...register("birth_date")}
            className="input-react"
          />
          <p className="error-form">{errors.birth_date?.message}</p>
        </div>

        {/* –ü–æ–ª */}
        <div className="column">
          <label>–ü–æ–ª:</label>
          <Controller
            name="gender"
            control={control}
            render={({ field }) => (
              <Select {...field} options={genders} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª" />
            )}
          />
          <p className="error-form">{errors.gender?.message}</p>
        </div>

        <div className="column">
          <label>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</label>
          <Controller
            name="sport"
            control={control}
            render={({ field }) => (
              <Select
                {...field}
                options={sports}
                isLoading={loadingSports}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞"
                onChange={(selectedOption) => {
                  field.onChange(selectedOption);
                  setValue("isTeamSport", false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç
                  setValue("team", null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                }}
                isClearable
                isSearchable
                noOptionsMessage={() => (
                  <div className="no-options-message">
                    <span>–¢–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö</span>
                    <button
                      type="button"
                      className="create-btn"
                      onClick={handleAddNewSport}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ "
                      {newSportName.trim() &&
                        newSportName.charAt(0).toUpperCase() +
                          newSportName.slice(1)}
                      "
                    </button>
                  </div>
                )}
                onInputChange={(value) => setNewSportName(value)}
              />
            )}
          />
        </div>

        <div className="column">
          <label className="team-checkbox">
            <input
              type="checkbox"
              {...register("isTeamSport")}
              onChange={(e) => setValue("isTeamSport", e.target.checked)}
            />
            –ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç
          </label>
        </div>

        {sport && (
          <>
            {isTeamSport && (
              <div className="column">
                <label>–ö–æ–º–∞–Ω–¥–∞:</label>
                <Controller
                  name="team"
                  control={control}
                  render={({ field }) => (
                    <Select
                      {...field}
                      options={teams}
                      isLoading={loadingTeams}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                      isClearable
                      isSearchable
                      noOptionsMessage={() => (
                        <div className="no-options-message">
                          <span>–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö</span>
                          <button
                            type="button"
                            className="create-btn"
                            onClick={handleAddNewTeam}
                          >
                            –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "
                            {newTeamName.trim() &&
                              newTeamName.charAt(0).toUpperCase() +
                                newTeamName.slice(1)}
                            "
                          </button>
                        </div>
                      )}
                      onInputChange={(value) => setNewTeamName(value)}
                    />
                  )}
                />
              </div>
            )}
          </>
        )}

        <button type="submit" className="submit-button">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>
      </form>
    </div>
  );
};

export default RegisterStudent;
