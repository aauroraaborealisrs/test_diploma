import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useForm, Controller } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import Select from "react-select";
import axios from "axios";
import { SERVER_LINK } from "../utils/api";
import { genders } from "../utils/interfaces";
import { toast, ToastContainer } from "react-toastify";
import SuccessModal from "./shared/SuccessModal";

// ‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤

const cyrillicOnly = /^[–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]+$/;

const schema = yup.object().shape({
  email: yup
    .string()
    .email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
    .max(100, "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤")
    .required("–í–≤–µ–¥–∏—Ç–µ email"),

  password: yup
    .string()
    .min(6, "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
    .max(32, "–ú–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞")
    .required("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),

  first_name: yup
    .string()
    .min(2, "–ú–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã")
    .max(24, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
    .matches(cyrillicOnly, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
    .required("–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),

  middle_name: yup
    .string()
    .min(2, "–ú–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã")
    .max(25, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ")
    .matches(cyrillicOnly, "–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
    .nullable(),

  last_name: yup
    .string()
    .min(2, "–ú–∏–Ω–∏–º—É–º 2 –±—É–∫–≤—ã")
    .max(24, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è")
    .matches(cyrillicOnly, "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
    .required("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"),

  gender: yup
    .object()
    .nullable()
    .required("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"),
});


const RegisterTrainer: React.FC = () => {
  const navigate = useNavigate();
  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
    defaultValues: {
      email: "",
      password: "",
      first_name: "",
      middle_name: "",
      last_name: "",
      gender: undefined,
    },
  });

  const [showModal, setShowModal] = useState(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏

  const onSubmit = async (data: any) => {
    try {
      await axios.post(`${SERVER_LINK}/register/init`, {
        ...data,
        gender: data.gender.value,
        role: "trainer", // üëà –Ω–æ–≤—ã–π –∫–ª—é—á
      });
  
      toast.success("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email");
      navigate("/verify-code", {
        state: { email: data.email, role: "trainer" }, // üëà –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
      });
    } catch (error: any) {
      toast.error(
        error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
      );
    }
  };
  

  return (
    <div className="register-form">
      <form onSubmit={handleSubmit(onSubmit)} className="reg-form">
        <div className="column">
          <label>Email:</label>
          <input {...register("email")} className="input-react" />
          <p className="error-form">{errors.email?.message}</p>
        </div>

        <div className="column">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type="password"
            {...register("password")}
            className="input-react"
          />
          <p className="error-form">{errors.password?.message}</p>
        </div>

        <div className="column">
          <label>–§–∞–º–∏–ª–∏—è:</label>
          <input {...register("last_name")} className="input-react" />
          <p className="error-form">{errors.last_name?.message}</p>
        </div>

        <div className="column">
          <label>–ò–º—è:</label>
          <input {...register("first_name")} className="input-react" />
          <p className="error-form">{errors.first_name?.message}</p>
        </div>

        <div className="column">
          <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
          <input {...register("middle_name")} className="input-react" />
        </div>

        <div className="column">
          <label>–ü–æ–ª:</label>
          <Controller
            name="gender"
            control={control}
            render={({ field }) => (
              <Select {...field} options={genders} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª" />
            )}
          />
          <p className="error-form">{errors.gender?.message}</p>
        </div>

        <button type="submit" className="submit-button">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </button>
      </form>

      {showModal && (
        <SuccessModal
          message="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
          onClose={() => setShowModal(false)}
        />
      )}

      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick={false}
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
    </div>
  );
};

export default RegisterTrainer;
