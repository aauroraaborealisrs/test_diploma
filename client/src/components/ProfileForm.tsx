import React, { useEffect, useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { useQuery } from "@tanstack/react-query";
import Select from "react-select";
import axios from "axios";
import "../styles/Register.css";
import { SERVER_LINK } from "../utils/api";
import { editStudentsSchema } from "../utils/validationSchemas";
import { fetchSports, fetchTeams } from "../utils/fetch";
import { genders, Option } from "../utils/interfaces";

const formatDateForInput = (dateString: string) => {
  const [day, month, year] = dateString.split('.');
  return `${year}-${month}-${day}`;
};

const ProfileForm: React.FC = () => {
  const [isEditing, setIsEditing] = useState(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [profileData, setProfileData] = useState<any>(null);

  const [newSportName, setNewSportName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
  const [newTeamName, setNewTeamName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

  const handleAddNewSport = async () => {
    if (!newSportName.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!");
      return;
    }

    try {
      const response = await axios.post(`${SERVER_LINK}/sport/create`, {
        sport_name: newSportName.trim(),
      });

      const result = response.data;
      const newSport = { value: result.sport_id, label: result.sport_name };

      setValue("sport", newSport); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
      setNewSportName(""); // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      refetchSports(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞

      alert("–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞:", error);
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞");
    }
  };

  const handleAddNewTeam = async () => {
    if (!newTeamName.trim() || !selectedSport) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞!");
      return;
    }

    try {
      const response = await axios.post(`${SERVER_LINK}/team/create`, {
        sport_id: selectedSport,
        team_name: newTeamName.trim(),
      });

      const result = response.data;
      const newTeam = { value: result.team_id, label: result.team_name };

      setValue("team", newTeam); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
      setNewTeamName(""); // ‚úÖ –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      refetchTeams(); // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

      alert("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", error);
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã");
    }
  };

  // üéØ React Hook Form
  const {
    register,
    handleSubmit,
    control,
    watch,
    setValue,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(editStudentsSchema),
    defaultValues: {
      email: "",
      // password: "",
      first_name: "",
      middle_name: "",
      last_name: "",
      birth_date: "",
      gender: undefined,
      sport: null,
      isTeamSport: false,
      team: null,
    },
  });

  const sport = watch("sport"); // –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞
  const isTeamSport = watch("isTeamSport"); // –°–ª–µ–¥–∏–º –∑–∞ —á–µ–∫–±–æ–∫—Å–æ–º "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç"

  const fetchProfile = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) return;

      const { data } = await axios.get(`${SERVER_LINK}/user/profile`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("üîπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data.user);
      setProfileData(data.user);

      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º—É
      setValue("email", data.user.email);
      setValue("first_name", data.user.first_name);
      setValue("middle_name", data.user.middle_name);
      setValue("last_name", data.user.last_name);
      // setValue("birth_date", data.user.birth_date);
      setValue("birth_date", formatDateForInput(data.user.birth_date));




      // setValue("password", ""); // –ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º, –Ω–æ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π

      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª
      const genderOption = genders.find((g) => g.value === data.user.gender);
      if (genderOption) setValue("gender", genderOption);

      // ‚úÖ –ò—â–µ–º –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const userSport =
        sports.find((s: Option) => s.value === data.user.sport_id) || null;
      setValue("sport", userSport);

      // ‚úÖ –ï—Å–ª–∏ —Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–π ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (userSport) {
        const teamsRes = await fetchTeams(userSport.value);
        setValue(
          "team",
          teamsRes.find((t: Option) => t.value === data.user.team_id) || null
        );
        setValue("isTeamSport", !!data.user.team_id);
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", err);
    }
  };

  // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
  const {
    data: sports = [],
    isLoading: loadingSports,
    refetch: refetchSports,
  } = useQuery({
    queryKey: ["sports"],
    queryFn: fetchSports,
  });

  const selectedSport =
    sport && "value" in sport ? (sport.value as string) : null;

  const {
    data: teams = [],
    isFetching: loadingTeams,
    refetch: refetchTeams,
  } = useQuery({
    queryKey: selectedSport ? ["teams", selectedSport] : ["teams"],
    queryFn: async () => {
      if (!selectedSport) return [];
      return await fetchTeams(selectedSport);
    },
    enabled: !!selectedSport,
  });

  useEffect(() => {


    fetchProfile();
  }, [setValue, sports]); // ‚úÖ sports —Ç–µ–ø–µ—Ä—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  const onSubmit = async (data: any) => {
    console.log("üöÄ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);
    console.log("‚ùó–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);
  
    try {
      const token = localStorage.getItem("token");
      if (!token) return alert("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
  
      const inTeam = data.isTeamSport; // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "–≤ –∫–æ–º–∞–Ω–¥–µ"
  
      const response = await axios.put(
        `${SERVER_LINK}/user/profile`, 
        {
          gender: data.gender?.value || null,
          sport_id: data.sport?.value || null,
          team_id: inTeam ? data.team?.value || null : null, // ‚úÖ –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º null
          in_team: inTeam, // ‚úÖ true/false –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
          email: data.email,
          first_name: data.first_name,
          middle_name: data.middle_name,
          last_name: data.last_name,
          birth_date: data.birth_date
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );
  
      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:", response.data);
      setIsEditing(false); // ‚úÖ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      await fetchProfile(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è

      alert("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!");
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
      alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
    }
  };
  
  
  return (
    <div className="profile-container">
      {!isEditing ? (
        // üìå –†–µ–∂–∏–º –ü–†–û–°–ú–û–¢–†–ê
        <div className="profile-view">
          {profileData ? (
            <>
              <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
              <p><strong>Email:</strong> {profileData.email}</p>
              <p><strong>–ò–º—è:</strong> {profileData.first_name}</p>
              <p><strong>–û—Ç—á–µ—Å—Ç–≤–æ:</strong> {profileData.middle_name}</p>
              <p><strong>–§–∞–º–∏–ª–∏—è:</strong> {profileData.last_name}</p>
              <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {profileData.birth_date.split("T")[0]}</p>
              <p><strong>–ü–æ–ª:</strong> {profileData.gender === "M" ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"}</p>
              <p><strong>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</strong> {profileData.sport_name || "–ù–µ —É–∫–∞–∑–∞–Ω"}</p>
              <p><strong>–ö–æ–º–∞–Ω–¥–∞:</strong> {profileData.team_name || "–ù–µ—Ç"}</p>
              <button onClick={() => setIsEditing(true)} className="edit-button">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
            </>
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
          )}
        </div>
      ) : (
        // üìå –†–µ–∂–∏–º –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
        <div className="register-form">
          <form
            onSubmit={handleSubmit((data) => {
              console.log("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);
              console.log("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);
              onSubmit(data);
            })}
            className="reg-form"
          >
            {/* Email */}
            <div className="column">
              <label>Email:</label>
              <input {...register("email")} className="input-react" />
              <p className="error-form">{errors.email?.message}</p>
            </div>
  
            {/* –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="column">
              <label>–ò–º—è:</label>
              <input {...register("first_name")} className="input-react" />
              <p className="error-form">{errors.first_name?.message}</p>
            </div>
            <div className="column">
              <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
              <input {...register("middle_name")} className="input-react" />
            </div>
            <div className="column">
              <label>–§–∞–º–∏–ª–∏—è:</label>
              <input {...register("last_name")} className="input-react" />
              <p className="error-form">{errors.last_name?.message}</p>
            </div>
            <div className="column">
              <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
              <input type="date" {...register("birth_date")} className="input-react" />
              <p className="error-form">{errors.birth_date?.message}</p>
            </div>
  
            {/* –ü–æ–ª */}
            <div className="column">
              <label>–ü–æ–ª:</label>
              <Controller
                name="gender"
                control={control}
                render={({ field }) => (
                  <Select {...field} options={genders} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª" />
                )}
              />
              <p className="error-form">{errors.gender?.message}</p>
            </div>
  
            {/* –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ */}
            <div className="column">
              <label>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</label>
              <Controller
                name="sport"
                control={control}
                render={({ field }) => (
                  <Select
                    {...field}
                    options={sports}
                    isLoading={loadingSports}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞"
                    onChange={(selectedOption) => {
                      field.onChange(selectedOption);
                      setValue("isTeamSport", false);
                      setValue("team", null);
                    }}
                    isClearable
                    isSearchable
                    noOptionsMessage={() => (
                      <div className="no-options-message">
                        <span>–¢–∞–∫–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö</span>
                        <button type="button" className="create-btn" onClick={handleAddNewSport}>
                          –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ "
                          {newSportName.trim() &&
                            newSportName.charAt(0).toUpperCase() + newSportName.slice(1)}
                          "
                        </button>
                      </div>
                    )}
                    onInputChange={(value) => setNewSportName(value)}
                  />
                )}
              />
            </div>
  
            {/* –ß–µ–∫–±–æ–∫—Å "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç" */}
            <div className="column">
              <label className="team-checkbox">
                <input
                  type="checkbox"
                  {...register("isTeamSport")}
                  onChange={(e) => setValue("isTeamSport", e.target.checked)}
                />
                –ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç
              </label>
            </div>
  
            {/* –ö–æ–º–∞–Ω–¥–∞ */}
            {sport && isTeamSport && (
              <div className="column">
                <label>–ö–æ–º–∞–Ω–¥–∞:</label>
                <Controller
                  name="team"
                  control={control}
                  render={({ field }) => (
                    <Select
                      {...field}
                      options={teams}
                      isLoading={loadingTeams}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                      isClearable
                      isSearchable
                      noOptionsMessage={() => (
                        <div className="no-options-message">
                          <span>–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö</span>
                          <button type="button" className="create-btn" onClick={handleAddNewTeam}>
                            –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É "
                            {newTeamName.trim() &&
                              newTeamName.charAt(0).toUpperCase() + newTeamName.slice(1)}
                            "
                          </button>
                        </div>
                      )}
                      onInputChange={(value) => setNewTeamName(value)}
                    />
                  )}
                />
              </div>
            )}
  
            {/* –ö–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å" */}
            <button type="submit" className="submit-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button type="button" onClick={() => setIsEditing(false)} className="cancel-button">
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default ProfileForm;
