import React, { useEffect, useState } from "react";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { useQuery } from "@tanstack/react-query";
import Select from "react-select";
import axios from "axios";
import "../styles/Register.css";
import { SERVER_LINK } from "../utils/api";
import { editStudentsSchema } from "../utils/validationSchemas";
import { fetchSports, fetchTeams } from "../utils/fetch";
import { genders, Option } from "../utils/interfaces";
import { toast, ToastContainer } from "react-toastify"; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º toast
import "react-toastify/dist/ReactToastify.css"; // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
import SuccessModal from "./shared/SuccessModal";
import { useAuth } from "./AuthProvider";

const formatDateForInput = (dateString: string) => {
  const [day, month, year] = dateString.split(".");
  return `${year}-${month}-${day}`;
};

const ProfileForm: React.FC = () => {
  console.log("—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ");

  const [isEditing, setIsEditing] = useState(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [profileData, setProfileData] = useState<any>(null);

  const [newSportName, setNewSportName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
  const [newTeamName, setNewTeamName] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã

  const [showModal, setShowModal] = useState(false); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏

  const { accessToken } = useAuth();

  // üéØ React Hook Form
  const {
    register,
    handleSubmit,
    control,
    watch,
    setValue,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(editStudentsSchema),
    defaultValues: {
      email: "",
      // password: "",
      first_name: "",
      middle_name: "",
      last_name: "",
      birth_date: "",
      gender: undefined,
      sport: null,
      isTeamSport: false,
      team: null,
    },
  });

  const sport = watch("sport"); // –°–ª–µ–¥–∏–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞
  const isTeamSport = watch("isTeamSport"); // –°–ª–µ–¥–∏–º –∑–∞ —á–µ–∫–±–æ–∫—Å–æ–º "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç"

  const fetchProfile = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) return;

      const { data } = await axios.get(`${SERVER_LINK}/user/profile`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      // console.log(accessToken);

      // if (!accessToken) return;
      // console.log(accessToken);

      // const { data } = await axios.get(`${SERVER_LINK}/user/profile`, {
      //   headers: {
      //     Authorization: `Bearer ${accessToken}`,
      //   },
      // });

      console.log("üîπ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data.user);
      setProfileData(data.user);

      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º—É
      setValue("email", data.user.email);
      setValue("first_name", data.user.first_name);
      setValue("middle_name", data.user.middle_name);
      setValue("last_name", data.user.last_name);
      // setValue("birth_date", data.user.birth_date);
      setValue("birth_date", formatDateForInput(data.user.birth_date));

      // setValue("password", ""); // –ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º, –Ω–æ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π

      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª
      const genderOption = genders.find((g) => g.value === data.user.gender);
      if (genderOption) setValue("gender", genderOption);

      // ‚úÖ –ò—â–µ–º –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      /* istanbul ignore next */
      const userSport =
        sports.find((s: Option) => s.value === data.user.sport_id) || null;
      setValue("sport", userSport);

      // ‚úÖ –ï—Å–ª–∏ —Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–π ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      /* istanbul ignore next */
      if (userSport) {
        /* istanbul ignore next */
        const teamsRes = await fetchTeams(userSport.value);
        /* istanbul ignore next */
        setValue(
          "team",
          teamsRes.find((t: Option) => t.value === data.user.team_id) || null
        );
        /* istanbul ignore next */
        setValue("isTeamSport", !!data.user.team_id);
      }
      /* istanbul ignore next */
    } catch (err) {
      /* istanbul ignore next */
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", err);
    }
  };

  // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º React Query –¥–ª—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
  const {
    data: sports = [],
    isLoading: loadingSports,
    refetch: refetchSports,
  } = useQuery({
    queryKey: ["sports"],
    queryFn: fetchSports,
  });

  const selectedSport =
    sport && "value" in sport ? (sport.value as string) : null;

    /* istanbul ignore next */
  const {
    data: teams = [],
    isFetching: loadingTeams,
    refetch: refetchTeams,
  } = useQuery({
    queryKey: selectedSport ? ["teams", selectedSport] : ["teams"],
    queryFn: async () => {
      if (!selectedSport) return [];
      return await fetchTeams(selectedSport);
    },
    enabled: !!selectedSport,
  });

  useEffect(() => {
    fetchProfile();
  }, [setValue]); // ‚úÖ sports —Ç–µ–ø–µ—Ä—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  const onSubmit = async (data: any) => {
    console.log("üöÄ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);
    console.log("‚ùó–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);
/* istanbul ignore next */
    try {
      if (!accessToken) {
        return toast.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      }

      const inTeam = data.isTeamSport; // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "–≤ –∫–æ–º–∞–Ω–¥–µ"
      /* istanbul ignore next */
      const response = await axios.put(
        `${SERVER_LINK}/user/profile`,
        {
          gender: data.gender?.value || null,
          sport_id: data.sport?.value || null,
          team_id: inTeam ? data.team?.value || null : null, // ‚úÖ –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º null
          in_team: inTeam, // ‚úÖ true/false –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
          email: data.email,
          first_name: data.first_name,
          middle_name: data.middle_name,
          last_name: data.last_name,
          birth_date: data.birth_date,
        },
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );

      console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:", response.data);
      setIsEditing(false); // ‚úÖ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      await fetchProfile(); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è

      setShowModal(true); // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏

      setTimeout(() => {
        setShowModal(false); // ‚úÖ –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫
      }, 3000);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
      toast.error(
        error.response?.data?.message || "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
      );
    }
  };

  return (
    <div className="profile-container">
      {!isEditing ? (
        // üìå –†–µ–∂–∏–º –ü–†–û–°–ú–û–¢–†–ê
        <div className="my-data-cont">
          {profileData ? (
            <>
              <h2>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</h2>

              <div className="detail-item">
                <span className="label">Email:</span>
                <span>{profileData.email}</span>
              </div>
              <div className="detail-item">
                <span className="label">–§–∞–º–∏–ª–∏—è:</span>
                <span>{profileData.last_name}</span>
              </div>
              <div className="detail-item">
                <span className="label">–ò–º—è:</span>
                <span>{profileData.first_name}</span>
              </div>
              <div className="detail-item">
                <span className="label">–û—Ç—á–µ—Å—Ç–≤–æ:</span>
                <span>{profileData.middle_name}</span>
              </div>

              <div className="detail-item">
                <span className="label">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</span>
                <span>{profileData.birth_date.split("T")[0]}</span>
              </div>
              <div className="detail-item">
                <span className="label">–ü–æ–ª:</span>
                <span>
                  {profileData.gender === "M" ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"}
                </span>
              </div>
              <div className="detail-item">
                <span className="label">–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</span>
                <span>{profileData.sport_name || "–ù–µ —É–∫–∞–∑–∞–Ω"}</span>
              </div>
              <div className="detail-item">
                <span className="label">–ö–æ–º–∞–Ω–¥–∞:</span>
                <span>{profileData.team_name || "–ù–µ—Ç"}</span>
              </div>

              <div className="detail-item">
                <span className="label">–ü–∞—Ä–æ–ª—å:</span>
                <span style={{ fontSize: "20px" }}>‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
              </div>

              <button
                onClick={() => setIsEditing(true)}
                className="edit-button"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </>
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
          )}
        </div>
      ) : (
        // üìå –†–µ–∂–∏–º –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
        <>
          <div className="register-form">
            <form
              onSubmit={handleSubmit((data) => {
                console.log("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", data);
                console.log("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", errors);
                onSubmit(data);
              })}
              className="reg-form"
            >
              <button
                type="button"
                onClick={() => setIsEditing(false)}
                className="close-button"
              >
                <img src="/close.svg" alt="–û—Ç–º–µ–Ω–∏—Ç—å" />
              </button>
              <h2>–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ</h2>
              {/* Email */}
              <div className="column">
                <label>Email:</label>
                <input {...register("email")} className="input-react" />
                <p className="error-form">{errors.email?.message}</p>
              </div>

              {/* –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                            <div className="column">
                <label>–§–∞–º–∏–ª–∏—è:</label>
                <input {...register("last_name")} className="input-react" />
                <p className="error-form">{errors.last_name?.message}</p>
              </div>
              <div className="column">
                <label>–ò–º—è:</label>
                <input {...register("first_name")} className="input-react" />
                <p className="error-form">{errors.first_name?.message}</p>
              </div>
              <div className="column">
                <label>–û—Ç—á–µ—Å—Ç–≤–æ:</label>
                <input {...register("middle_name")} className="input-react" />
              </div>
              <div className="column">
                <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                <input
                  type="date"
                  {...register("birth_date")}
                  className="input-react"
                />
                <p className="error-form">{errors.birth_date?.message}</p>
              </div>

              {/* –ü–æ–ª */}
              <div className="column">
                <label>–ü–æ–ª:</label>
                <Controller
                  name="gender"
                  control={control}
                  render={({ field }) => (
                    <Select
                      {...field}
                      options={genders}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª"
                    />
                  )}
                />
                <p className="error-form">{errors.gender?.message}</p>
              </div>

              <div className="column">
                <label>–ü–∞—Ä–æ–ª—å:</label>
                <input className="input-react" />
                <p className="error-form">{errors.first_name?.message}</p>
              </div>

              <div className="column">
                <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</label>
                <input className="input-react" />
                <p className="error-form">{errors.first_name?.message}</p>
              </div>

              <button type="submit" className="submit-button">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </form>
          </div>
        </>
      )}

      {showModal && (
        <SuccessModal
          message="–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!"
          onClose={() => setShowModal(false)}
        />
      )}

      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick={false}
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
    </div>
  );
};

export default ProfileForm;
