import React from "react";
import { Navigate, Outlet } from "react-router-dom";
import useUserRole from "../hooks/useUserRole"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫
import { useAuth } from "./AuthProvider";

interface ProtectedRouteProps {
  allowedRoles: string[];
  children?: React.ReactNode; // üî• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É children
}

// const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ allowedRoles, children }) => {
//   const userRole = useUserRole(); // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

//   const { accessToken, isInitialized } = useAuth();

//   // ‚è≥ –ü–æ–∫–∞ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ç—è–Ω—É–ª—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
//   if (!isInitialized) {
//     return null; // –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å <Loading />
//   }

//   if (!userRole) {
//     // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login
//     console.log('no role');
//     return <Navigate to="/login" />;
//   }

//   if (!allowedRoles.includes(userRole)) {
//     // –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /not-found
//     return <Navigate to="/not-found" />;
//   }

//   // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ Outlet
//   return children ? <>{children}</> : <Outlet />;
// };


// const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ allowedRoles, children }) => {
//   const { accessToken, isInitialized } = useAuth();
//   const userRole = useUserRole();

//   // ‚è≥ –ü–æ–∫–∞ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ç—è–Ω—É–ª—Å—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º
//   if (!isInitialized) {
//     return null; // –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å <Loading />
//   }

//   if (!userRole) {
//     console.log('‚ùå No role ‚Üí redirecting to /login');
//     return <Navigate to="/login" />;
//   }

//   if (!allowedRoles.includes(userRole)) {
//     console.log('‚ö†Ô∏è Role not allowed ‚Üí redirecting to /not-found');
//     return <Navigate to="/not-found" />;
//   }

//   return children ? <>{children}</> : <Outlet />;
// };

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ allowedRoles, children }) => {
  const { accessToken, isInitialized } = useAuth();
  const userRole = useUserRole();

  console.log("üîê ProtectedRoute ‚Üí accessToken:", accessToken);
  console.log("üîê ProtectedRoute ‚Üí isInitialized:", isInitialized);
  console.log("üîê ProtectedRoute ‚Üí userRole:", userRole);

  if (!isInitialized) return null; // –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ accessToken

  if (!userRole) {
    console.warn("‚ùå No role ‚Üí redirecting to login");
    return <Navigate to="/login" />;
  }

  if (!allowedRoles.includes(userRole)) {
    console.warn("‚õî Role not allowed ‚Üí redirecting to not-found");
    return <Navigate to="/not-found" />;
  }

  return children ? <>{children}</> : <Outlet />;
};

export default ProtectedRoute;